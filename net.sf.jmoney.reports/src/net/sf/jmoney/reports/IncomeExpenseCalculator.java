/*
*
*  JMoney - A Personal Finance Manager
*  Copyright (c) 2005 Nigel Westbury <westbury@users.sourceforge.net>
*
*
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software
*  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

package net.sf.jmoney.reports;

import java.util.Map;

import net.sf.jasperreports.engine.fill.JRCalculator;
import net.sf.jasperreports.engine.fill.JRFillField;
import net.sf.jasperreports.engine.fill.JRFillVariable;

/**
 * An implementation of the JRCalculator interface that
 * evaluates the expressions needed by the account balances
 * report.  This hand-coded version replaces the version
 * generated by JasperReports compiler.
 * 
 * @author Nigel Westbury
 */
public class IncomeExpenseCalculator extends JRCalculator
{
	public static final int CURRENCY_CODE = 1;
	public static final int TOTAL_FOR_CURRENCY_TEXT = 2;
	public static final int TOTAL_INCOME_FOR_CURRENCY = 3;
	public static final int TOTAL_EXPENSE_FOR_CURRENCY = 4;
	public static final int TOTAL_NET_INCOME_STRING = 5;
	public static final int BASE_CATEGORY = 6;
	public static final int BASE_CATEGORY_TOTAL_STRING = 61;
	public static final int TOTAL_INCOME_FOR_BASE_CATEGORY = 7;
	public static final int TOTAL_EXPENSE_FOR_BASE_CATEGORY = 8;
	public static final int INCOME_FIELD = 9;
	public static final int EXPENSE_FIELD = 10;
	public static final int CATEGORY_FIELD = 11;
	public static final int INCOME_STRING_FIELD = 12;
	public static final int EXPENSE_STRING_FIELD = 13;
	public static final int PAGE_NUMBER = 14;
	public static final int ZERO = 15;
	
    private JRFillField field_currencyCode = null;
    private JRFillField field_baseCategory = null;
    private JRFillField field_category = null;
    private JRFillField field_income = null;
    private JRFillField field_incomeString = null;
    private JRFillField field_expense = null;
    private JRFillField field_expenseString = null;

    private JRFillVariable variable_PAGE_NUMBER = null;
    private JRFillVariable variable_PAGE_COUNT = null;
    private JRFillVariable variable_CurrencyIncome = null;
    private JRFillVariable variable_CurrencyExpense = null;
    private JRFillVariable variable_BaseCategoryIncome = null;
    private JRFillVariable variable_BaseCategoryExpense = null;

    private Map<Integer, Integer> expressionMap;
/*    
	private VerySimpleDateFormat dateFormat =	
		new VerySimpleDateFormat(ClientPlugin.getDefault().getDateFormat());	
*/
    public IncomeExpenseCalculator(Map<Integer, Integer> expressionMap) {
		this.expressionMap = expressionMap;
	}

	/**
     *
     */
    @SuppressWarnings("unchecked")
	public void customizedInit(Map pm, Map fm, Map vm)
    {
        field_currencyCode = (JRFillField)fm.get("currencyCode");
        field_baseCategory = (JRFillField)fm.get("baseCategory");
        field_category = (JRFillField)fm.get("category");
        field_income = (JRFillField)fm.get("income");
        field_incomeString = (JRFillField)fm.get("incomeString");
        field_expense = (JRFillField)fm.get("expense");
        field_expenseString = (JRFillField)fm.get("expenseString");

        variable_PAGE_NUMBER = (JRFillVariable)vm.get("PAGE_NUMBER");
        variable_PAGE_COUNT = (JRFillVariable)vm.get("PAGE_COUNT");
        variable_CurrencyIncome = (JRFillVariable)vm.get("CurrencyIncome");
        variable_CurrencyExpense = (JRFillVariable)vm.get("CurrencyExpense");
        variable_BaseCategoryIncome = (JRFillVariable)vm.get("BaseCategoryIncome");
        variable_BaseCategoryExpense = (JRFillVariable)vm.get("BaseCategoryExpense");
    }

/* Cleaner approach when we move to Java 5 source compatability.    
    enum EvaluationType {
    	normal {
        	Object getValue(JRFillField field) { return field.getValue(); }
        	Object getValue(JRFillVariable variable)  { return variable.getValue(); }
    	},
    	old {
    		Object getValue(JRFillField field) { return field.getOldValue(); }
    		Object getValue(JRFillVariable variable)  { return variable.getOldValue(); }
    	}, 
    	estimated {
    		Object getValue(JRFillField field) { return field.getValue(); }
    		Object getValue(JRFillVariable variable)  { return variable.getEstimatedValue(); }
    	};
    	
    	abstract Object getValue(JRFillField field);
    	abstract Object getValue(JRFillVariable variable);
    }
*/        
    public Object evaluate(int id) throws Throwable
    {
    	return evaluate(id, EvaluationType.normal);
    }
    	
    public Object evaluateOld(int id) throws Throwable
    {
    	return evaluate(id, EvaluationType.old);
    }
    	
    public Object evaluateEstimated(int id) throws Throwable
    {
    	return evaluate(id, EvaluationType.estimated);
    }
  
    private Object getValue(JRFillField field, EvaluationType evaluationType) {
    	return evaluationType.getValue(field); 
    }
    
    private Object getValue(JRFillVariable variable, EvaluationType evaluationType) {
    	return evaluationType.getValue(variable); 
    }
    
    public Object evaluate(int id, EvaluationType evaluationType) throws Throwable
    {
    	int expressionNumber = ((Integer)expressionMap.get(new Integer(id))).intValue();
    	
    	switch (expressionNumber) {
    	case CURRENCY_CODE:
    		return getValue(field_currencyCode, evaluationType);
    		
    	case TOTAL_FOR_CURRENCY_TEXT:
    		return 
    		ReportsPlugin.getResourceString("Report.Total")
    		+ " "
    		+ getValue(field_currencyCode, evaluationType);
    		
    	case TOTAL_INCOME_FOR_CURRENCY:
    		return ReportsPlugin.format(
    				((Long)getValue(variable_CurrencyIncome, evaluationType)).longValue(),
    				(String)getValue(field_currencyCode, evaluationType)
    		);
    		
    	case TOTAL_EXPENSE_FOR_CURRENCY:
    		return ReportsPlugin.format(
    				((Long)getValue(variable_CurrencyExpense, evaluationType)).longValue(),
    				(String)getValue(field_currencyCode, evaluationType)
    		);
    		
    	case TOTAL_NET_INCOME_STRING:
    		long netIncome =
    			((Long)getValue(variable_CurrencyIncome, evaluationType)).longValue()
    			 - ((Long)getValue(variable_CurrencyExpense, evaluationType)).longValue();
    			 
    		return ReportsPlugin.format(
    				netIncome,
    				(String)getValue(field_currencyCode, evaluationType));
    		
    	case BASE_CATEGORY:
    		return getValue(field_baseCategory, evaluationType);
    		
    	case BASE_CATEGORY_TOTAL_STRING:
    		return getValue(field_baseCategory, evaluationType)
    		+ " ("
    		+ ReportsPlugin.getResourceString("Report.Total")
    		+ ")";
    		
    	case TOTAL_INCOME_FOR_BASE_CATEGORY:
    		return ReportsPlugin.format(
    				((Long)getValue(variable_BaseCategoryIncome, evaluationType)).longValue(),
    				(String)getValue(field_currencyCode, evaluationType));
    		
        case TOTAL_EXPENSE_FOR_BASE_CATEGORY:
        	return ReportsPlugin.format(
        			((Long)getValue(variable_BaseCategoryExpense, evaluationType)).longValue(),
        			(String)getValue(field_currencyCode, evaluationType));
        		
    	case INCOME_FIELD:
    		return getValue(field_income, evaluationType);
    		
    	case EXPENSE_FIELD:
    		return getValue(field_expense, evaluationType);
    		
    	case CATEGORY_FIELD:
    		return getValue(field_category, evaluationType);
    		
    	case INCOME_STRING_FIELD:
    		return getValue(field_incomeString, evaluationType);
    		
    	case EXPENSE_STRING_FIELD:
    		return getValue(field_expenseString, evaluationType);
    		
    	case PAGE_NUMBER:
    		return 
    		ReportsPlugin.getResourceString("Report.Page")
    		+ " "
    		+ (Integer)getValue(variable_PAGE_NUMBER, evaluationType) + " of " + (Integer)getValue(variable_PAGE_COUNT, evaluationType);
    		
    	case ZERO:
    		return new Long(0);
    	}
    	return null;
    }
}
/*
abstract class EvaluationType {
	static EvaluationType normal = new EvaluationType() {
    	Object getValue(JRFillField field) { return field.getValue(); }
    	Object getValue(JRFillVariable variable)  { return variable.getValue(); }
	};
	static EvaluationType old = new EvaluationType() {
		Object getValue(JRFillField field) { return field.getOldValue(); }
		Object getValue(JRFillVariable variable)  { return variable.getOldValue(); }
	};
	static EvaluationType estimated = new EvaluationType() {
		Object getValue(JRFillField field) { return field.getValue(); }
		Object getValue(JRFillVariable variable)  { return variable.getEstimatedValue(); }
	};
	
	abstract Object getValue(JRFillField field);
	abstract Object getValue(JRFillVariable variable);
}
*/
