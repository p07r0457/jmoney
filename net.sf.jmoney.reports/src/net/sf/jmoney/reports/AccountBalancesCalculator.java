/*
*
*  JMoney - A Personal Finance Manager
*  Copyright (c) 2005 Nigel Westbury <westbury@users.sourceforge.net>
*
*
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software
*  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

package net.sf.jmoney.reports;

import java.util.Map;

import net.sf.jasperreports.engine.fill.JRCalculator;
import net.sf.jasperreports.engine.fill.JRFillField;
import net.sf.jasperreports.engine.fill.JRFillVariable;


/**
 * An implementation of the JRCalculator interface that
 * evaluates the expressions needed by the account balances
 * report.  This hand-coded version replaces the version
 * generated by JasperReports compiler.
 * 
 * @author Nigel Westbury
 */
public class AccountBalancesCalculator extends JRCalculator
{
	public static final int TOTAL_FOR_CURRENCY = 1;
	public static final int TOTAL_FOR_CURRENCY_TEXT = 2;
	public static final int CURRENCY_CODE = 3;
	public static final int BALANCE_FIELD = 4;
	public static final int PAGE_NUMBER = 5;
	public static final int ZERO = 6;
	public static final int ACCOUNT_NAME_FIELD = 7;
	public static final int BALANCE_STRING_FIELD = 8;

    private JRFillField field_currencyCode = null;
    private JRFillField field_accountName = null;
    private JRFillField field_balance = null;
    private JRFillField field_balanceString = null;

    private JRFillVariable variable_PAGE_NUMBER = null;
    private JRFillVariable variable_PAGE_COUNT = null;
    private JRFillVariable variable_BalanceSum = null;

    private Map expressionMap;

    public AccountBalancesCalculator(Map expressionMap) {
		this.expressionMap = expressionMap;
	}


	/**
     *
     */
    public void customizedInit(Map pm, Map fm, Map vm)
    {
        field_currencyCode = (JRFillField)fm.get("currencyCode");
        field_accountName = (JRFillField)fm.get("accountName");
        field_balance = (JRFillField)fm.get("balance");
        field_balanceString = (JRFillField)fm.get("balanceString");

        variable_PAGE_NUMBER = (JRFillVariable)vm.get("PAGE_NUMBER");
        variable_PAGE_COUNT = (JRFillVariable)vm.get("PAGE_COUNT");
        variable_BalanceSum = (JRFillVariable)vm.get("BalanceSum");
    }

    public Object evaluate(int id) throws Throwable
    {
    	return evaluate(id, EvaluationType.normal);
    }
    	
    public Object evaluateOld(int id) throws Throwable
    {
    	return evaluate(id, EvaluationType.old);
    }
    	
    public Object evaluateEstimated(int id) throws Throwable
    {
    	return evaluate(id, EvaluationType.estimated);
    }
  
    private Object getValue(JRFillField field, EvaluationType evaluationType) {
    	return evaluationType.getValue(field); 
    }
    
    private Object getValue(JRFillVariable variable, EvaluationType evaluationType) {
    	return evaluationType.getValue(variable); 
    }
    
    public Object evaluate(int id, EvaluationType evaluationType) throws Throwable
    {
    	int expressionNumber = ((Integer)expressionMap.get(new Integer(id))).intValue();
    	
    	switch (expressionNumber) {
    	case TOTAL_FOR_CURRENCY:
    		return ReportsPlugin.format(
    				((Long)getValue(variable_BalanceSum, evaluationType)).longValue(),
    				(String)getValue(field_currencyCode, evaluationType)
    		);
    		
    	case TOTAL_FOR_CURRENCY_TEXT:
    		return 
    		ReportsPlugin.getResourceString("Report.Total")
    		+ " "
    		+ getValue(field_currencyCode, evaluationType);
    		
    	case CURRENCY_CODE:
    		return getValue(field_currencyCode, evaluationType);
    		
    	case BALANCE_FIELD:
    		return getValue(field_balance, evaluationType);
    		
    	case BALANCE_STRING_FIELD:
    		return getValue(field_balanceString, evaluationType);
    		
    	case ACCOUNT_NAME_FIELD:
    		return getValue(field_accountName, evaluationType);
    		
    		case PAGE_NUMBER:
    		return 
    		ReportsPlugin.getResourceString("Report.Page")
    		+ " "
    		+ (Integer)getValue(variable_PAGE_NUMBER, evaluationType) + " of " + (Integer)getValue(variable_PAGE_COUNT, evaluationType);
    		
    	case ZERO:
    		return new Long(0);
    	}
    	return null;
    }
}
